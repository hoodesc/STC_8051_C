C51 COMPILER V9.06   NRF24L01_RX                                                           11/29/2016 20:41:04 PAGE 1   


C51 COMPILER V9.06, COMPILATION OF MODULE NRF24L01_RX
OBJECT MODULE PLACED IN .\Output\NRF24L01_RX.obj
COMPILER INVOKED BY: D:\Keil uV5\C51\BIN\C51.EXE source code\NRF24L01_RX.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(.\
                    -include;..\系统;.\source code) DEBUG PRINT(.\Listing\NRF24L01_RX.lst) TABS(2) OBJECT(.\Output\NRF24L01_RX.obj)

line level    source

   1          #include <stc15.h>
   2          #include "MYTYPE.h"
   3          #include "NRF24L01_RX.h"
   4          #include "delay.h"
   5          //NRF24L01 只 接收程序
   6          uchar const RX_ADDRESS[RX_ADR_WIDTH] = {0x12,0x21,0xaa,0x34,0x43};    // 接收地址
   7          uchar const TX_ADDRESS[TX_ADR_WIDTH] = {0x12,0x21,0xaa,0x34,0x43};    // 发送地址
   8          
   9          uchar RX_DAT[RX_PLOAD_WIDTH] = {0}; //  接收内容数组
  10          
  11          uchar bdata sta;
  12          sbit RX_DR  = sta^6;
  13          sbit TX_DR  = sta^5;
  14          sbit MAX_RT = sta^4;
  15          
  16          //  SPI写一字节 
  17          uchar SPI_RW(uchar dat)
  18          {
  19   1        uchar i;
  20   1        for(i = 0; i < 8; i++)
  21   1        {
  22   2          MOSI = (dat & 0x80);  //  最高位放到线上
  23   2          dat  = (dat << 1);    //  数据左移一位
  24   2          SCK  = 1;       //  上升沿读入
  25   2          dat |= MISO;      //  接收从机返回数据
  26   2          SCK  = 0;       //  下降沿输出    
  27   2        }
  28   1        return(dat);
  29   1      }
  30          
  31          //  SPI写寄存器值
  32          uchar SPI_RW_Reg(uchar reg,uchar value)
  33          {
  34   1        uchar status;
  35   1        CSN = 0;        //  SPI使能，开始传输数据
  36   1        status = SPI_RW(reg); //  选择寄存器
  37   1        SPI_RW(value);      //  写值到寄存器
  38   1        CSN = 1;        //  SPI失能，结束数据传输
  39   1        return(status);
  40   1      }
  41          
  42          //  SPI读寄存器值
  43          uchar SPI_Read(uchar reg)
  44          {
  45   1        uchar reg_value;
  46   1        CSN = 0;          //  SPI使能，开始传输数据
  47   1        SPI_RW(reg);        //  选择寄存器
  48   1        reg_value = SPI_RW(0);    //  读取寄存器值到reg_value
  49   1        CSN = 1;          //  SPI失能，结束数据传输
  50   1        return(reg_value);
  51   1      }
  52          
  53          //  SPI写bytes字节
  54          uchar SPI_Write_Buf(uchar reg,uchar *pBuf,uchar bytes)
C51 COMPILER V9.06   NRF24L01_RX                                                           11/29/2016 20:41:04 PAGE 2   

  55          { 
  56   1        uchar status;
  57   1        uchar i;
  58   1        CSN = 0;          //  SPI使能，开始传输数据
  59   1        status = SPI_RW(reg);   //  选择寄存器
  60   1        for(i = 0; i < bytes; i++)
  61   1          SPI_RW(*pBuf++);    //  写bytes字节值到寄存器
  62   1        CSN = 1;          //  SPI失能，结束数据传输
  63   1        return(status);
  64   1      }
  65          
  66          //  SPI读bytes字节
  67          uchar SPI_Read_Buf(uchar reg,uchar *pBuf,uchar bytes)
  68          {
  69   1        uchar status;
  70   1        uchar i;
  71   1        CSN = 0;           // SPI使能，开始传输数据
  72   1        status = SPI_RW(reg);    // 选择寄存器
  73   1        for(i = 0; i < bytes; i++)
  74   1          pBuf[i] = SPI_RW(0);   // 读寄存器bytes字节值 
  75   1        CSN = 1;           // SPI失能，结束数据传输
  76   1        return(status);
  77   1      }
  78          
  79          //  NRF24L01接收模式初始化
  80          void NRF24L01_Init()
  81          {
  82   1        CE = 0;   //  芯片使能
  83   1        CSN = 1;  //  失能SPI
  84   1        SCK = 0;  //  SPI时钟线初始低电平
  85   1        SPI_Write_Buf(WRITE_REG + TX_ADDR,TX_ADDRESS,TX_ADR_WIDTH);   //  写本地地址
  86   1        SPI_Write_Buf(WRITE_REG + RX_ADDR_P0,RX_ADDRESS,RX_ADR_WIDTH);  //  写接收端地址
  87   1        SPI_RW_Reg(WRITE_REG + RX_PW_P0,RX_PLOAD_WIDTH);        //  接收通道0数据长度
  88   1        SPI_RW_Reg(WRITE_REG + EN_AA,0x00);     //  关闭数据通道0~5自动应答
  89   1        SPI_RW_Reg(WRITE_REG + SETUP_RETR,0x00);  //  关闭自动重发
  90   1        SPI_RW_Reg(WRITE_REG + EN_RXADDR,0x01);   //  打开接收通道0
  91   1        SPI_RW_Reg(WRITE_REG + RF_CH,50); //  射频通道2.44GHz
  92   1        SPI_RW_Reg(WRITE_REG + RF_SETUP,0x07);  //  低噪声放大增益器、0dBm、2Mbps
  93   1      }
  94          
  95          void SetRX_Mode(void)
  96          {
  97   1        CE = 0;
  98   1        SPI_RW_Reg(WRITE_REG + CONFIG,0x0F);        //  接收、上电模式、2字节CRC校验、IRQ收发完成中断 
  99   1        CE = 1;
 100   1        DelayUs(200);
 101   1        //  接收模式
 102   1      }
 103          
 104          //  NRF24L01接收函数
 105          void NRF24L01_RxPacket(uchar *pBuf)
 106          {
 107   1      //  uchar i;
 108   1        sta = SPI_Read(STATUS);   //  读状态寄存器
 109   1        if(RX_DR)
 110   1        {
 111   2          CE = 0;
 112   2          SPI_Read_Buf(R_TX_PAYLOAD,pBuf,RX_PLOAD_WIDTH);
 113   2      
 114   2      //    if(RX_DAT[0] == 0xaa && RX_DAT[1] == 0xbb && RX_DAT[2] == 0xcc && RX_DAT[3] == 0xDD && RX_DAT[4] == 0x
             -EE)
 115   2      //      motor();
C51 COMPILER V9.06   NRF24L01_RX                                                           11/29/2016 20:41:04 PAGE 3   

 116   2      //    for(i = 0; i < 5; i++)
 117   2      //    {
 118   2      //      SBUF = RX_DAT[i];
 119   2      //      RX_DAT[i] = 0x00;
 120   2      //      while(!TI);
 121   2      //      TI = 0;       
 122   2      //    }
 123   2          SPI_RW_Reg(WRITE_REG + STATUS,0x7E);    //  清除中断  
 124   2        } 
 125   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    298    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     15      10
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      1    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
