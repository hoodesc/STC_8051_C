C51 COMPILER V9.06   NRF24L01_RX                                                           07/07/2016 13:15:17 PAGE 1   


C51 COMPILER V9.06, COMPILATION OF MODULE NRF24L01_RX
OBJECT MODULE PLACED IN .\Output\NRF24L01_RX.obj
COMPILER INVOKED BY: d:\Keil uV4\C51\BIN\C51.EXE source code\NRF24L01_RX.c BROWSE INCDIR(..\Test2;.\Include;.\source cod
                    -e) DEBUG OBJECTEXTEND PRINT(.\Listings\NRF24L01_RX.lst) OBJECT(.\Output\NRF24L01_RX.obj)

line level    source

   1          #include <stc12c2052ad.h>
   2          #include <stdio.h>
   3          #include "MYTYPE.h"
   4          #include "Delay.h"
   5          #include "NRF24L01_RX.h"
   6          
   7          //NRF24L01 只 发送程序
   8          
   9          
  10          uchar const RX_ADDRESS[RX_ADR_WIDTH] = {0x12,0x21,0xaa,0x34,0x43};              // 接收地址
  11          uchar const TX_ADDRESS[TX_ADR_WIDTH] = {0x12,0x21,0xaa,0x34,0x43};              // 发送地址
  12          
  13          //      状态位
  14          uchar bdata sta;
  15          sbit RX_DR = sta^6;             // 接收数据中断位
  16          sbit TX_DS = sta^5;             // 发送数据中断位
  17          sbit MAX_RT = sta^4;    // 重发次数溢出中断位
  18                  
  19          // SPI位定义
  20          //sbit SCK  = P1^7;             // SPI时钟
  21          //sbit MISO = P1^6;             // 主出从入
  22          //sbit MOSI = P1^5;             // 主入从出
  23          //sbit CSN  = P1^4;             // 芯片片选，为低芯片工作
  24          //sbit IRQ  = P1^3;             // 中断信号
  25          //sbit CE   = P1^2;             // 芯片模式控制线
  26          
  27          //      SPI写一字节
  28          uchar SPI_RW(uchar dat)
  29          {
  30   1              uchar i;
  31   1              for(i = 0; i < 8; i++)
  32   1              {
  33   2                      MOSI = (dat&0x80);      // dat最高位放入数据线
  34   2                      dat = dat<<1;           // dat左移1位
  35   2                      SCK     = 1;                    // 拉高时钟，数据送入从机（上升沿读入）
  36   2                      dat |= MISO;            // 接收从机传来数据
  37   2                      SCK = 0;                        // 拉低时钟                              （下降沿输出）
  38   2              }
  39   1              return(dat);                    // 返回NRF24L01状态
  40   1      }
  41          
  42          //      SPI写寄存器值
  43          uchar SPI_RW_Reg(uchar reg,uchar value)
  44          {
  45   1              uchar status;
  46   1              CSN = 0;                                // CSN置低，开始传输数据
  47   1              status = SPI_RW(reg);   // 选择寄存器，同时返回状态字
  48   1              SPI_RW(value);                  // 写入数据到寄存器
  49   1              CSN = 1;                                // CSN置高，结束数据传输
  50   1              return(status);
  51   1      }
  52          
  53          //      SPI读一字节     
  54          uchar SPI_Read(uchar reg)
C51 COMPILER V9.06   NRF24L01_RX                                                           07/07/2016 13:15:17 PAGE 2   

  55          {
  56   1              uchar reg_value;                        // 存放读出寄存器数据
  57   1      
  58   1              CSN = 0;                                        // CSN置低，开始传输数据
  59   1              SPI_RW(reg);                            // 选择寄存器
  60   1              reg_value = SPI_RW(0);  // 读出数据
  61   1              CSN = 1;                                        // CSN置高，结束数据传输
  62   1              return(reg_value);                      // 返回reg寄存器值              
  63   1      }
  64          
  65          // SPI读bytes字节数据
  66          uchar SPI_Read_Buf(uchar reg,uchar *pBuf,uchar bytes)
  67          {
  68   1              uchar status,i;                          
  69   1              CSN = 0;                                         // CSN置低，开始传输数据
  70   1              status = SPI_RW(reg);            // 选择寄存器，同时返回状态字
  71   1              for(i = 0; i < bytes; i++)
  72   1                      pBuf[i] = SPI_RW(0);     // 读出数据存放到数组
  73   1              CSN = 1;                                         // CSN置高，结束数据传输
  74   1              return(status);
  75   1      }  
  76          
  77          //      SPI写bytes字节数据
  78          uchar SPI_Write_Buf(uchar reg,uchar *pBuf,uchar bytes)
  79          {
  80   1              uchar status,i;
  81   1              CSN = 0;                                         // CSN置低，开始传输数据
  82   1              status = SPI_RW(reg);            // 选择寄存器，同时返回状态字
  83   1              for(i = 0; i < bytes; i++)
  84   1                      SPI_RW(*pBuf++);                 // 数据写进寄存器
  85   1              CSN = 1;                                         // CSN置高，结束数据传输
  86   1              return(status);
  87   1      }
  88          
  89          void NRF24L01_Init(void)
  90          {
  91   1              CE  = 0;        // 芯片使能     
  92   1              CSN = 1;        // SPI失能      
  93   1              SCK = 0;        // 时钟初始化低电平
  94   1              SPI_RW_Reg(WRITE_REG + EN_AA,0x00);                     // 失能自动应答0~5
  95   1              SPI_RW_Reg(WRITE_REG + EN_RXADDR,0x01);         // 使能接收通道0
  96   1              SPI_RW_Reg(WRITE_REG + SETUP_RETR,0x00);        // 失能自动重发
  97   1              SPI_RW_Reg(WRITE_REG + RF_CH,40);                               // 设置发射频率2.44GHz
  98   1              SPI_RW_Reg(WRITE_REG + RF_SETUP,0x07);                  // 设置低噪声放大器，发射功率0dBm，数据传输率1Mbps
  99   1      }
 100          
 101          void SetRX_Mode()
 102          {
 103   1              CE = 0;
 104   1              SPI_Write_Buf(WRITE_REG + RX_ADDR_P0,RX_ADDRESS,RX_ADR_WIDTH);          //      接收通道0地址
 105   1              SPI_RW_Reg(WRITE_REG + RX_PW_P0,RX_PLOAD_WIDTH);                                                                        //      接收通道0 数据长度
 106   1              SPI_RW_Reg(WRITE_REG + CONFIG,0x0F);    //      接收、上电模式、2字节CRC校验，IRQ收发完成中断
 107   1              CE = 1;         //      接收模式
 108   1      }
 109          
 110          uchar NRF24L01_RxPacket(uchar *rx_buf)
 111          {
 112   1              uchar re_flag = 0;
 113   1              sta = SPI_Read(STATUS); //      读取状态寄存器
 114   1              if(RX_DR)
 115   1              {
 116   2                      LED = 0;
C51 COMPILER V9.06   NRF24L01_RX                                                           07/07/2016 13:15:17 PAGE 3   

 117   2                      CE = 0;
 118   2                      SPI_Read_Buf(RD_TX_PLOAD,rx_buf,RX_PLOAD_WIDTH);
 119   2                      re_flag = 1;
 120   2              }
 121   1              SPI_RW_Reg(WRITE_REG + STATUS,sta);             // 清除中断     
 122   1              return re_flag;
 123   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    274    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     11      13
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
