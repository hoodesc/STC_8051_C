C51 COMPILER V9.06   NRF24L01_RX                                                           11/09/2016 11:01:16 PAGE 1   


C51 COMPILER V9.06, COMPILATION OF MODULE NRF24L01_RX
OBJECT MODULE PLACED IN .\Output\NRF24L01_RX.obj
COMPILER INVOKED BY: D:\Keil uV4\C51\BIN\C51.EXE source code\NRF24L01_RX.c BROWSE INCDIR(..\NRF24L01_RX;.\source code;.\
                    -Include) DEBUG OBJECTEXTEND PRINT(.\Listings\NRF24L01_RX.lst) OBJECT(.\Output\NRF24L01_RX.obj)

line level    source

   1          #include <stc12c2052ad.h>
   2          #include "MYTYPE.h"
   3          #include "NRF24L01_RX.h"
   4          #include "Delay.h"
   5          #include "main.h"
   6          #include "keyscan.h"
   7          //NRF24L01 只 接收程序
   8          
   9          
  10          uchar const RX_ADDRESS[RX_ADR_WIDTH] = {0x12,0x21,0xaa,0x34,0x43};              // 接收地址
  11          uchar const TX_ADDRESS[TX_ADR_WIDTH] = {0x12,0x21,0xaa,0x34,0x43};              // 发送地址
  12          
  13          uchar RX_DAT[RX_PLOAD_WIDTH] = {0};     //      接收内容数组
  14          
  15          uchar bdata sta;
  16          sbit RX_DR  = sta^6;
  17          sbit TX_DR  = sta^5;
  18          sbit MAX_RT = sta^4;
  19          
  20                  
  21          //      NRF24L01 脚管定义
  22          sbit CE  = P1^7;                // 芯片使能
  23          sbit CSN = P1^6;                // SPI控制位
  24          sbit SCK = P1^5;                // SPI时钟
  25          sbit MOSI  = P1^4;              // 主出从入
  26          sbit MISO  = P1^3;              // 主入从出
  27          
  28          //      SPI写一字节     
  29          uchar SPI_RW(uchar dat)
  30          {
  31   1              uchar i;
  32   1              for(i = 0; i < 8; i++)
  33   1              {
  34   2                      MOSI = (dat & 0x80);    //      最高位放到线上
  35   2                      dat  = (dat << 1);              //      数据左移一位
  36   2                      SCK  = 1;                               //      上升沿读入
  37   2                      dat |= MISO;                    //      接收从机返回数据
  38   2                      SCK  = 0;                               //      下降沿输出              
  39   2              }
  40   1              return(dat);
  41   1      }
  42          
  43          //      SPI写寄存器值
  44          uchar SPI_RW_Reg(uchar reg,uchar value)
  45          {
  46   1              uchar status;
  47   1              CSN = 0;                                //      SPI使能，开始传输数据
  48   1              status = SPI_RW(reg);   //      选择寄存器
  49   1              SPI_RW(value);                  //      写值到寄存器
  50   1              CSN = 1;                                //      SPI失能，结束数据传输
  51   1              return(status);
  52   1      }
  53          
  54          //      SPI读寄存器值
C51 COMPILER V9.06   NRF24L01_RX                                                           11/09/2016 11:01:16 PAGE 2   

  55          uchar SPI_Read(uchar reg)
  56          {
  57   1              uchar reg_value;
  58   1              CSN = 0;                                        //      SPI使能，开始传输数据
  59   1              SPI_RW(reg);                            //      选择寄存器
  60   1              reg_value = SPI_RW(0);          //      读取寄存器值到reg_value
  61   1              CSN = 1;                                        //      SPI失能，结束数据传输
  62   1              return(reg_value);
  63   1      }
  64          
  65          //      SPI写bytes字节
  66          uchar SPI_Write_Buf(uchar reg,uchar *pBuf,uchar bytes)
  67          {       
  68   1              uchar status;
  69   1              uchar i;
  70   1              CSN = 0;                                        //      SPI使能，开始传输数据
  71   1              status = SPI_RW(reg);           //      选择寄存器
  72   1              for(i = 0; i < bytes; i++)
  73   1                      SPI_RW(*pBuf++);                //      写bytes字节值到寄存器
  74   1              CSN = 1;                                        //      SPI失能，结束数据传输
  75   1              return(status);
  76   1      }
  77          
  78          //      SPI读bytes字节
  79          uchar SPI_Read_Buf(uchar reg,uchar *pBuf,uchar bytes)
  80          {
  81   1              uchar status;
  82   1              uchar i;
  83   1              CSN = 0;                                         //     SPI使能，开始传输数据
  84   1              status = SPI_RW(reg);            //     选择寄存器
  85   1              for(i = 0; i < bytes; i++)
  86   1                      pBuf[i] = SPI_RW(0);     //     读寄存器bytes字节值     
  87   1              CSN = 1;                                         //     SPI失能，结束数据传输
  88   1              return(status);
  89   1      }
  90          
  91          //      NRF24L01接收模式初始化
  92          void NRF24L01_Init()
  93          {
  94   1              CE = 0;         //      芯片使能
  95   1              CSN = 1;        //      失能SPI
  96   1              SCK = 0;        //      SPI时钟线初始低电平
  97   1              SPI_Write_Buf(WRITE_REG + TX_ADDR,TX_ADDRESS,TX_ADR_WIDTH);             //      写本地地址
  98   1              SPI_Write_Buf(WRITE_REG + RX_ADDR_P0,RX_ADDRESS,RX_ADR_WIDTH);  //      写接收端地址
  99   1              SPI_RW_Reg(WRITE_REG + RX_PW_P0,RX_PLOAD_WIDTH);                                //      接收通道0数据长度
 100   1              SPI_RW_Reg(WRITE_REG + EN_AA,0x00);                     //      关闭数据通道0~5自动应答
 101   1              SPI_RW_Reg(WRITE_REG + SETUP_RETR,0x00);        //      关闭自动重发
 102   1              SPI_RW_Reg(WRITE_REG + EN_RXADDR,0x01);         //      打开接收通道0
 103   1              SPI_RW_Reg(WRITE_REG + RF_CH,40);       //      射频通道2.44GHz
 104   1              SPI_RW_Reg(WRITE_REG + RF_SETUP,0x07);  //      低噪声放大增益器、0dBm、2Mbps
 105   1      }
 106          
 107          void SetRX_Mode(void)
 108          {
 109   1              CE = 0;
 110   1              SPI_RW_Reg(WRITE_REG + CONFIG,0x0F);                            //      接收、上电模式、2字节CRC校验、IRQ收发完成中断   
 111   1              CE = 1;
 112   1              DelayUs(200);
 113   1              //      接收模式
 114   1      }
 115          
 116          //      NRF24L01接收函数
C51 COMPILER V9.06   NRF24L01_RX                                                           11/09/2016 11:01:16 PAGE 3   

 117          void NRF24L01_RxPacket(uchar *pBuf)
 118          {
 119   1              uchar i;
 120   1              sta = SPI_Read(STATUS);         //      读状态寄存器
 121   1              if(RX_DR)
 122   1              {
 123   2                      CE = 0;
 124   2                      SPI_Read_Buf(R_TX_PAYLOAD,pBuf,RX_PLOAD_WIDTH);
 125   2      
 126   2                      if(RX_DAT[0] == 0xaa && RX_DAT[1] == 0xbb && RX_DAT[2] == 0xcc && RX_DAT[3] == 0xDD && RX_DAT[4] == 0xEE
             -)
 127   2                              motor();
 128   2                      for(i = 0; i < 5; i++)
 129   2                      {
 130   3                              SBUF = RX_DAT[i];
 131   3                              RX_DAT[i] = 0x00;
 132   3                              while(!TI);
 133   3                              TI = 0;                         
 134   3                      }
 135   2                      SPI_RW_Reg(WRITE_REG + STATUS,0x7E);            //      清除中断        
 136   2              }
 137   1              
 138   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    321    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     16      10
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
