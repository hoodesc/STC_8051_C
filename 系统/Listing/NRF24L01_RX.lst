C51 COMPILER V9.06   NRF24L01_RX                                                           11/12/2016 11:29:00 PAGE 1   


C51 COMPILER V9.06, COMPILATION OF MODULE NRF24L01_RX
OBJECT MODULE PLACED IN .\Output\NRF24L01_RX.obj
COMPILER INVOKED BY: D:\Keil uV5\C51\BIN\C51.EXE source code\NRF24L01_RX.c OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(.\includ
                    -e;..\系统;.\source code) DEBUG PRINT(.\Listing\NRF24L01_RX.lst) TABS(2) OBJECT(.\Output\NRF24L01_RX.obj)

line level    source

   1          #include <stc15.h>
   2          #include "MYTYPE.h"
   3          #include "NRF24L01_RX.h"
   4          #include "delay.h"
   5          //NRF24L01 只 接收程序
   6          
   7          
   8          uchar const RX_ADDRESS[RX_ADR_WIDTH] = {0x12,0x21,0xaa,0x34,0x43};    // 接收地址
   9          uchar const TX_ADDRESS[TX_ADR_WIDTH] = {0x12,0x21,0xaa,0x34,0x43};    // 发送地址
  10          
  11          uchar RX_DAT[RX_PLOAD_WIDTH] = {0x00};  //  接收内容数组
  12          
  13          uchar bdata sta;
  14          sbit RX_DR  = sta^6;
  15          sbit TX_DR  = sta^5;
  16          sbit MAX_RT = sta^4;
  17          
  18            
  19          //  NRF24L01 脚管定义
  20          sbit CE  = P4^1;    // 芯片使能
  21          sbit CSN = P4^2;    // SPI控制位
  22          sbit SCK = P3^7;    // SPI时钟
  23          sbit MOSI  = P4^4;    // 主出从入
  24          sbit MISO  = P3^6;    // 主入从出
  25          
  26          //  SPI写一字节 
  27          uchar SPI_RW(uchar dat)
  28          {
  29   1        uchar i;
  30   1        for(i = 0; i < 8; i++)
  31   1        {
  32   2          MOSI = (dat & 0x80);  //  最高位放到线上
  33   2          dat  = (dat << 1);    //  数据左移一位
  34   2          SCK  = 1;       //  上升沿读入
  35   2          dat |= MISO;      //  接收从机返回数据
  36   2          SCK  = 0;       //  下降沿输出    
  37   2        }
  38   1        return(dat);
  39   1      }
  40          
  41          //  SPI写寄存器值
  42          uchar SPI_RW_Reg(uchar reg,uchar value)
  43          {
  44   1        uchar status;
  45   1        CSN = 0;        //  SPI使能，开始传输数据
  46   1        status = SPI_RW(reg); //  选择寄存器
  47   1        SPI_RW(value);      //  写值到寄存器
  48   1        CSN = 1;        //  SPI失能，结束数据传输
  49   1        return(status);
  50   1      }
  51          
  52          //  SPI读寄存器值
  53          uchar SPI_Read(uchar reg)
  54          {
C51 COMPILER V9.06   NRF24L01_RX                                                           11/12/2016 11:29:00 PAGE 2   

  55   1        uchar reg_value;
  56   1        CSN = 0;          //  SPI使能，开始传输数据
  57   1        SPI_RW(reg);        //  选择寄存器
  58   1        reg_value = SPI_RW(0);    //  读取寄存器值到reg_value
  59   1        CSN = 1;          //  SPI失能，结束数据传输
  60   1        return(reg_value);
  61   1      }
  62          
  63          //  SPI写bytes字节
  64          uchar SPI_Write_Buf(uchar reg,uchar *pBuf,uchar bytes)
  65          { 
  66   1        uchar status;
  67   1        uchar i;
  68   1        CSN = 0;          //  SPI使能，开始传输数据
  69   1        status = SPI_RW(reg);   //  选择寄存器
  70   1        for(i = 0; i < bytes; i++)
  71   1          SPI_RW(*pBuf++);    //  写bytes字节值到寄存器
  72   1        CSN = 1;          //  SPI失能，结束数据传输
  73   1        return(status);
  74   1      }
  75          
  76          //  SPI读bytes字节
  77          uchar SPI_Read_Buf(uchar reg,uchar *pBuf,uchar bytes)
  78          {
  79   1        uchar status;
  80   1        uchar i;
  81   1        CSN = 0;           // SPI使能，开始传输数据
  82   1        status = SPI_RW(reg);    // 选择寄存器
  83   1        for(i = 0; i < bytes; i++)
  84   1          pBuf[i] = SPI_RW(0);   // 读寄存器bytes字节值 
  85   1        CSN = 1;           // SPI失能，结束数据传输
  86   1        return(status);
  87   1      }
  88          
  89          //  NRF24L01接收模式初始化
  90          void NRF24L01_Init()
  91          {
  92   1        CE = 0;   //  芯片使能
  93   1        CSN = 1;  //  失能SPI
  94   1        SCK = 0;  //  SPI时钟线初始低电平
  95   1        SPI_Write_Buf(WRITE_REG + TX_ADDR,TX_ADDRESS,TX_ADR_WIDTH);     //  写本地地址
  96   1        SPI_Write_Buf(WRITE_REG + RX_ADDR_P0,RX_ADDRESS,RX_ADR_WIDTH);  //  写接收端地址
  97   1        SPI_RW_Reg(WRITE_REG + RX_PW_P0,RX_PLOAD_WIDTH);        //  接收通道0数据长度
  98   1        SPI_RW_Reg(WRITE_REG + EN_AA,0x00);     //  关闭数据通道0~5自动应答
  99   1        SPI_RW_Reg(WRITE_REG + SETUP_RETR,0x00);  //  关闭自动重发
 100   1        SPI_RW_Reg(WRITE_REG + EN_RXADDR,0x01);   //  打开接收通道0
 101   1        SPI_RW_Reg(WRITE_REG + RF_CH,40); //  射频通道2.44GHz
 102   1        SPI_RW_Reg(WRITE_REG + RF_SETUP,0x07);  //  低噪声放大增益器、0dBm、2Mbps
 103   1      }
 104          
 105          void SetRX_Mode(void)
 106          {
 107   1        CE = 0;
 108   1        SPI_RW_Reg(WRITE_REG + CONFIG,0x0F);        //  接收、上电模式、2字节CRC校验、IRQ收发完成中断 
 109   1        CE = 1;
 110   1        DelayUs(200);
 111   1        //  接收模式
 112   1      }
 113          
 114          //  NRF24L01接收函数
 115          void NRF24L01_RxPacket(uchar *pBuf)
 116          {
C51 COMPILER V9.06   NRF24L01_RX                                                           11/12/2016 11:29:00 PAGE 3   

 117   1        uchar i;
 118   1        sta = SPI_Read(STATUS);   //  读状态寄存器
 119   1        if(RX_DR)
 120   1        {
 121   2          CE = 0;
 122   2          SPI_Read_Buf(R_TX_PAYLOAD,pBuf,RX_PLOAD_WIDTH);
 123   2      
 124   2      //    if(RX_DAT[0] == 0xaa && RX_DAT[1] == 0xbb && RX_DAT[2] == 0xcc && RX_DAT[3] == 0xDD && RX_DAT[4] == 0x
             -EE)
 125   2      //      //执行
 126   2          for(i = 0; i < 5; i++)
 127   2          {
 128   3            SBUF = RX_DAT[i];
 129   3            RX_DAT[i] = 0x00;
 130   3            while(!TI);
 131   3            TI = 0;       
 132   3          }
 133   2          SPI_RW_Reg(WRITE_REG + STATUS,0x7E);    //  清除中断  
 134   2        }
 135   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    293    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     16      10
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
